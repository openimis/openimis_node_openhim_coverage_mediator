{
  "{\"sourceRoot\":\"/home/davi/Documents/healthix/mediators/claim/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/davi/Documents/healthix/mediators/claim\",\"filename\":\"/home/davi/Documents/healthix/mediators/claim/src/index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/davi/Documents/healthix/mediators/claim\",\"plugins\":[],\"presets\":[]}:7.12.9": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/davi/Documents/healthix/mediators/claim",
      "filename": "/home/davi/Documents/healthix/mediators/claim/src/index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/davi/Documents/healthix/mediators/claim",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/davi/Documents/healthix/mediators/claim/src/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/davi/Documents/healthix/mediators/claim/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst koa = require('koa');\n\nconst koaRouter = require('koa-router');\n\nconst {\n  DateTime\n} = require('luxon');\n\nconst config = require('./config').getConfig();\n\nconst logger = require('./logger');\n\nconst openhim = require('./openhim');\n\nconst app = new koa();\nconst router = new koaRouter();\nconst millisecondsAtStart = DateTime.utc().ts;\nrouter.get('/uptime', (ctx, next) => {\n  const now = DateTime.utc().ts;\n  ctx.status = 200;\n  ctx.body = {\n    milliseconds: now - millisecondsAtStart\n  };\n  next();\n});\napp.use(router.routes());\napp.listen(config.port, () => {\n  logger.info(`Server listening on port ${config.port}...`);\n\n  if (config.openhim.register) {\n    openhim.mediatorSetup();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImtvYSIsInJlcXVpcmUiLCJrb2FSb3V0ZXIiLCJEYXRlVGltZSIsImNvbmZpZyIsImdldENvbmZpZyIsImxvZ2dlciIsIm9wZW5oaW0iLCJhcHAiLCJyb3V0ZXIiLCJtaWxsaXNlY29uZHNBdFN0YXJ0IiwidXRjIiwidHMiLCJnZXQiLCJjdHgiLCJuZXh0Iiwibm93Iiwic3RhdHVzIiwiYm9keSIsIm1pbGxpc2Vjb25kcyIsInVzZSIsInJvdXRlcyIsImxpc3RlbiIsInBvcnQiLCJpbmZvIiwicmVnaXN0ZXIiLCJtZWRpYXRvclNldHVwIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLE1BQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLFlBQUQsQ0FBekI7O0FBQ0EsTUFBTTtBQUFDRSxFQUFBQTtBQUFELElBQWFGLE9BQU8sQ0FBQyxPQUFELENBQTFCOztBQUVBLE1BQU1HLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkksU0FBcEIsRUFBZjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBR0EsTUFBTU8sR0FBRyxHQUFHLElBQUlSLEdBQUosRUFBWjtBQUNBLE1BQU1TLE1BQU0sR0FBRyxJQUFJUCxTQUFKLEVBQWY7QUFHQSxNQUFNUSxtQkFBbUIsR0FBR1AsUUFBUSxDQUFDUSxHQUFULEdBQWVDLEVBQTNDO0FBRUFILE1BQU0sQ0FBQ0ksR0FBUCxDQUFXLFNBQVgsRUFBc0IsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDbkMsUUFBTUMsR0FBRyxHQUFHYixRQUFRLENBQUNRLEdBQVQsR0FBZUMsRUFBM0I7QUFDQUUsRUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQWEsR0FBYjtBQUNBSCxFQUFBQSxHQUFHLENBQUNJLElBQUosR0FBVztBQUNUQyxJQUFBQSxZQUFZLEVBQUVILEdBQUcsR0FBR047QUFEWCxHQUFYO0FBR0FLLEVBQUFBLElBQUk7QUFDTCxDQVBEO0FBU0FQLEdBQUcsQ0FBQ1ksR0FBSixDQUFRWCxNQUFNLENBQUNZLE1BQVAsRUFBUjtBQUVBYixHQUFHLENBQUNjLE1BQUosQ0FBV2xCLE1BQU0sQ0FBQ21CLElBQWxCLEVBQXdCLE1BQU07QUFDMUJqQixFQUFBQSxNQUFNLENBQUNrQixJQUFQLENBQWEsNEJBQTJCcEIsTUFBTSxDQUFDbUIsSUFBSyxLQUFwRDs7QUFDQSxNQUFJbkIsTUFBTSxDQUFDRyxPQUFQLENBQWVrQixRQUFuQixFQUE2QjtBQUMzQmxCLElBQUFBLE9BQU8sQ0FBQ21CLGFBQVI7QUFDRDtBQUNGLENBTEgiLCJzb3VyY2VSb290IjoiL2hvbWUvZGF2aS9Eb2N1bWVudHMvaGVhbHRoaXgvbWVkaWF0b3JzL2NsYWltL3NyYy8iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qga29hID0gcmVxdWlyZSgna29hJylcbmNvbnN0IGtvYVJvdXRlciA9IHJlcXVpcmUoJ2tvYS1yb3V0ZXInKVxuY29uc3Qge0RhdGVUaW1lfSA9IHJlcXVpcmUoJ2x1eG9uJylcblxuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKS5nZXRDb25maWcoKVxuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKVxuY29uc3Qgb3BlbmhpbSA9IHJlcXVpcmUoJy4vb3BlbmhpbScpXG5cblxuY29uc3QgYXBwID0gbmV3IGtvYSgpXG5jb25zdCByb3V0ZXIgPSBuZXcga29hUm91dGVyKClcblxuXG5jb25zdCBtaWxsaXNlY29uZHNBdFN0YXJ0ID0gRGF0ZVRpbWUudXRjKCkudHNcblxucm91dGVyLmdldCgnL3VwdGltZScsIChjdHgsIG5leHQpID0+IHtcbiAgY29uc3Qgbm93ID0gRGF0ZVRpbWUudXRjKCkudHNcbiAgY3R4LnN0YXR1cyA9IDIwMFxuICBjdHguYm9keSA9IHtcbiAgICBtaWxsaXNlY29uZHM6IG5vdyAtIG1pbGxpc2Vjb25kc0F0U3RhcnRcbiAgfVxuICBuZXh0KClcbn0pXG5cbmFwcC51c2Uocm91dGVyLnJvdXRlcygpKVxuXG5hcHAubGlzdGVuKGNvbmZpZy5wb3J0LCAoKSA9PiB7XG4gICAgbG9nZ2VyLmluZm8oYFNlcnZlciBsaXN0ZW5pbmcgb24gcG9ydCAke2NvbmZpZy5wb3J0fS4uLmApXG4gICAgaWYgKGNvbmZpZy5vcGVuaGltLnJlZ2lzdGVyKSB7XG4gICAgICBvcGVuaGltLm1lZGlhdG9yU2V0dXAoKVxuICAgIH1cbiAgfSkiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "koa",
        "require",
        "koaRouter",
        "DateTime",
        "config",
        "getConfig",
        "logger",
        "openhim",
        "app",
        "router",
        "millisecondsAtStart",
        "utc",
        "ts",
        "get",
        "ctx",
        "next",
        "now",
        "status",
        "body",
        "milliseconds",
        "use",
        "routes",
        "listen",
        "port",
        "info",
        "register",
        "mediatorSetup"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAaF,OAAO,CAAC,OAAD,CAA1B;;AAEA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBI,SAApB,EAAf;;AACA,MAAMC,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMM,OAAO,GAAGN,OAAO,CAAC,WAAD,CAAvB;;AAGA,MAAMO,GAAG,GAAG,IAAIR,GAAJ,EAAZ;AACA,MAAMS,MAAM,GAAG,IAAIP,SAAJ,EAAf;AAGA,MAAMQ,mBAAmB,GAAGP,QAAQ,CAACQ,GAAT,GAAeC,EAA3C;AAEAH,MAAM,CAACI,GAAP,CAAW,SAAX,EAAsB,CAACC,GAAD,EAAMC,IAAN,KAAe;AACnC,QAAMC,GAAG,GAAGb,QAAQ,CAACQ,GAAT,GAAeC,EAA3B;AACAE,EAAAA,GAAG,CAACG,MAAJ,GAAa,GAAb;AACAH,EAAAA,GAAG,CAACI,IAAJ,GAAW;AACTC,IAAAA,YAAY,EAAEH,GAAG,GAAGN;AADX,GAAX;AAGAK,EAAAA,IAAI;AACL,CAPD;AASAP,GAAG,CAACY,GAAJ,CAAQX,MAAM,CAACY,MAAP,EAAR;AAEAb,GAAG,CAACc,MAAJ,CAAWlB,MAAM,CAACmB,IAAlB,EAAwB,MAAM;AAC1BjB,EAAAA,MAAM,CAACkB,IAAP,CAAa,4BAA2BpB,MAAM,CAACmB,IAAK,KAApD;;AACA,MAAInB,MAAM,CAACG,OAAP,CAAekB,QAAnB,EAA6B;AAC3BlB,IAAAA,OAAO,CAACmB,aAAR;AACD;AACF,CALH",
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "sourcesContent": [
        "'use strict'\n\nconst koa = require('koa')\nconst koaRouter = require('koa-router')\nconst {DateTime} = require('luxon')\n\nconst config = require('./config').getConfig()\nconst logger = require('./logger')\nconst openhim = require('./openhim')\n\n\nconst app = new koa()\nconst router = new koaRouter()\n\n\nconst millisecondsAtStart = DateTime.utc().ts\n\nrouter.get('/uptime', (ctx, next) => {\n  const now = DateTime.utc().ts\n  ctx.status = 200\n  ctx.body = {\n    milliseconds: now - millisecondsAtStart\n  }\n  next()\n})\n\napp.use(router.routes())\n\napp.listen(config.port, () => {\n    logger.info(`Server listening on port ${config.port}...`)\n    if (config.openhim.register) {\n      openhim.mediatorSetup()\n    }\n  })"
      ]
    },
    "sourceType": "module",
    "mtime": 1607537941733
  },
  "{\"sourceRoot\":\"/home/davi/Documents/healthix/mediators/claim/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/davi/Documents/healthix/mediators/claim\",\"filename\":\"/home/davi/Documents/healthix/mediators/claim/src/config.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/davi/Documents/healthix/mediators/claim\",\"plugins\":[],\"presets\":[]}:7.12.9": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/davi/Documents/healthix/mediators/claim",
      "filename": "/home/davi/Documents/healthix/mediators/claim/src/config.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/davi/Documents/healthix/mediators/claim",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/davi/Documents/healthix/mediators/claim/src/config.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/davi/Documents/healthix/mediators/claim/src/config.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
        "sourceFileName": "config.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst {\n  parseStringToBoolean\n} = require('./util');\n\nexports.getConfig = function () {\n  return Object.freeze({\n    port: process.env.SERVER_PORT || 3003,\n    logLevel: process.env.LOG_LEVEL || 'info',\n    enableLogging: parseStringToBoolean(process.env.ENABLE_LOGGING, true),\n    openhim: Object.freeze({\n      apiURL: process.env.OPENHIM_URL || 'https://localhost:8080',\n      username: process.env.OPENHIM_USERNAME || 'root@openhim.org',\n      password: process.env.OPENHIM_PASSWORD || 'kithongo1',\n      trustSelfSigned: parseStringToBoolean(process.env.TRUST_SELF_SIGNED, true),\n      register: parseStringToBoolean(process.env.OPENHIM_REGISTER, true),\n      urn: process.env.MEDIATOR_URN || 'urn:mediator:claim_mediator'\n    })\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy5qcyJdLCJuYW1lcyI6WyJwYXJzZVN0cmluZ1RvQm9vbGVhbiIsInJlcXVpcmUiLCJleHBvcnRzIiwiZ2V0Q29uZmlnIiwiT2JqZWN0IiwiZnJlZXplIiwicG9ydCIsInByb2Nlc3MiLCJlbnYiLCJTRVJWRVJfUE9SVCIsImxvZ0xldmVsIiwiTE9HX0xFVkVMIiwiZW5hYmxlTG9nZ2luZyIsIkVOQUJMRV9MT0dHSU5HIiwib3BlbmhpbSIsImFwaVVSTCIsIk9QRU5ISU1fVVJMIiwidXNlcm5hbWUiLCJPUEVOSElNX1VTRVJOQU1FIiwicGFzc3dvcmQiLCJPUEVOSElNX1BBU1NXT1JEIiwidHJ1c3RTZWxmU2lnbmVkIiwiVFJVU1RfU0VMRl9TSUdORUQiLCJyZWdpc3RlciIsIk9QRU5ISU1fUkVHSVNURVIiLCJ1cm4iLCJNRURJQVRPUl9VUk4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU07QUFBQ0EsRUFBQUE7QUFBRCxJQUF5QkMsT0FBTyxDQUFDLFFBQUQsQ0FBdEM7O0FBRUFDLE9BQU8sQ0FBQ0MsU0FBUixHQUFvQixZQUFZO0FBQzlCLFNBQU9DLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ25CQyxJQUFBQSxJQUFJLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxXQUFaLElBQTJCLElBRGQ7QUFFbkJDLElBQUFBLFFBQVEsRUFBRUgsT0FBTyxDQUFDQyxHQUFSLENBQVlHLFNBQVosSUFBeUIsTUFGaEI7QUFHbkJDLElBQUFBLGFBQWEsRUFBRVosb0JBQW9CLENBQUNPLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxjQUFiLEVBQTZCLElBQTdCLENBSGhCO0FBSW5CQyxJQUFBQSxPQUFPLEVBQUVWLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ3JCVSxNQUFBQSxNQUFNLEVBQUVSLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUSxXQUFaLElBQTJCLHdCQURkO0FBRXJCQyxNQUFBQSxRQUFRLEVBQUVWLE9BQU8sQ0FBQ0MsR0FBUixDQUFZVSxnQkFBWixJQUFnQyxrQkFGckI7QUFHckJDLE1BQUFBLFFBQVEsRUFBRVosT0FBTyxDQUFDQyxHQUFSLENBQVlZLGdCQUFaLElBQWdDLFdBSHJCO0FBSXJCQyxNQUFBQSxlQUFlLEVBQUVyQixvQkFBb0IsQ0FDbkNPLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYyxpQkFEdUIsRUFFbkMsSUFGbUMsQ0FKaEI7QUFRckJDLE1BQUFBLFFBQVEsRUFBRXZCLG9CQUFvQixDQUFDTyxPQUFPLENBQUNDLEdBQVIsQ0FBWWdCLGdCQUFiLEVBQStCLElBQS9CLENBUlQ7QUFTckJDLE1BQUFBLEdBQUcsRUFBRWxCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZa0IsWUFBWixJQUE0QjtBQVRaLEtBQWQ7QUFKVSxHQUFkLENBQVA7QUFnQkQsQ0FqQkQiLCJzb3VyY2VSb290IjoiL2hvbWUvZGF2aS9Eb2N1bWVudHMvaGVhbHRoaXgvbWVkaWF0b3JzL2NsYWltL3NyYy8iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3Qge3BhcnNlU3RyaW5nVG9Cb29sZWFufSA9IHJlcXVpcmUoJy4vdXRpbCcpXG5cbmV4cG9ydHMuZ2V0Q29uZmlnID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgcG9ydDogcHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlQgfHwgMzAwMyxcbiAgICBsb2dMZXZlbDogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMIHx8ICdpbmZvJyxcbiAgICBlbmFibGVMb2dnaW5nOiBwYXJzZVN0cmluZ1RvQm9vbGVhbihwcm9jZXNzLmVudi5FTkFCTEVfTE9HR0lORywgdHJ1ZSksXG4gICAgb3BlbmhpbTogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICBhcGlVUkw6IHByb2Nlc3MuZW52Lk9QRU5ISU1fVVJMIHx8ICdodHRwczovL2xvY2FsaG9zdDo4MDgwJyxcbiAgICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5PUEVOSElNX1VTRVJOQU1FIHx8ICdyb290QG9wZW5oaW0ub3JnJyxcbiAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5PUEVOSElNX1BBU1NXT1JEIHx8ICdraXRob25nbzEnLFxuICAgICAgdHJ1c3RTZWxmU2lnbmVkOiBwYXJzZVN0cmluZ1RvQm9vbGVhbihcbiAgICAgICAgcHJvY2Vzcy5lbnYuVFJVU1RfU0VMRl9TSUdORUQsXG4gICAgICAgIHRydWVcbiAgICAgICksXG4gICAgICByZWdpc3RlcjogcGFyc2VTdHJpbmdUb0Jvb2xlYW4ocHJvY2Vzcy5lbnYuT1BFTkhJTV9SRUdJU1RFUiwgdHJ1ZSksXG4gICAgICB1cm46IHByb2Nlc3MuZW52Lk1FRElBVE9SX1VSTiB8fCAndXJuOm1lZGlhdG9yOmNsYWltX21lZGlhdG9yJ1xuICAgIH0pXG4gIH0pXG59Il19",
    "map": {
      "version": 3,
      "sources": [
        "config.js"
      ],
      "names": [
        "parseStringToBoolean",
        "require",
        "exports",
        "getConfig",
        "Object",
        "freeze",
        "port",
        "process",
        "env",
        "SERVER_PORT",
        "logLevel",
        "LOG_LEVEL",
        "enableLogging",
        "ENABLE_LOGGING",
        "openhim",
        "apiURL",
        "OPENHIM_URL",
        "username",
        "OPENHIM_USERNAME",
        "password",
        "OPENHIM_PASSWORD",
        "trustSelfSigned",
        "TRUST_SELF_SIGNED",
        "register",
        "OPENHIM_REGISTER",
        "urn",
        "MEDIATOR_URN"
      ],
      "mappings": "AAAA;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAyBC,OAAO,CAAC,QAAD,CAAtC;;AAEAC,OAAO,CAACC,SAAR,GAAoB,YAAY;AAC9B,SAAOC,MAAM,CAACC,MAAP,CAAc;AACnBC,IAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,IADd;AAEnBC,IAAAA,QAAQ,EAAEH,OAAO,CAACC,GAAR,CAAYG,SAAZ,IAAyB,MAFhB;AAGnBC,IAAAA,aAAa,EAAEZ,oBAAoB,CAACO,OAAO,CAACC,GAAR,CAAYK,cAAb,EAA6B,IAA7B,CAHhB;AAInBC,IAAAA,OAAO,EAAEV,MAAM,CAACC,MAAP,CAAc;AACrBU,MAAAA,MAAM,EAAER,OAAO,CAACC,GAAR,CAAYQ,WAAZ,IAA2B,wBADd;AAErBC,MAAAA,QAAQ,EAAEV,OAAO,CAACC,GAAR,CAAYU,gBAAZ,IAAgC,kBAFrB;AAGrBC,MAAAA,QAAQ,EAAEZ,OAAO,CAACC,GAAR,CAAYY,gBAAZ,IAAgC,WAHrB;AAIrBC,MAAAA,eAAe,EAAErB,oBAAoB,CACnCO,OAAO,CAACC,GAAR,CAAYc,iBADuB,EAEnC,IAFmC,CAJhB;AAQrBC,MAAAA,QAAQ,EAAEvB,oBAAoB,CAACO,OAAO,CAACC,GAAR,CAAYgB,gBAAb,EAA+B,IAA/B,CART;AASrBC,MAAAA,GAAG,EAAElB,OAAO,CAACC,GAAR,CAAYkB,YAAZ,IAA4B;AATZ,KAAd;AAJU,GAAd,CAAP;AAgBD,CAjBD",
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "sourcesContent": [
        "'use strict'\n\nconst {parseStringToBoolean} = require('./util')\n\nexports.getConfig = function () {\n  return Object.freeze({\n    port: process.env.SERVER_PORT || 3003,\n    logLevel: process.env.LOG_LEVEL || 'info',\n    enableLogging: parseStringToBoolean(process.env.ENABLE_LOGGING, true),\n    openhim: Object.freeze({\n      apiURL: process.env.OPENHIM_URL || 'https://localhost:8080',\n      username: process.env.OPENHIM_USERNAME || 'root@openhim.org',\n      password: process.env.OPENHIM_PASSWORD || 'kithongo1',\n      trustSelfSigned: parseStringToBoolean(\n        process.env.TRUST_SELF_SIGNED,\n        true\n      ),\n      register: parseStringToBoolean(process.env.OPENHIM_REGISTER, true),\n      urn: process.env.MEDIATOR_URN || 'urn:mediator:claim_mediator'\n    })\n  })\n}"
      ]
    },
    "sourceType": "module",
    "mtime": 1607532527021
  },
  "{\"sourceRoot\":\"/home/davi/Documents/healthix/mediators/claim/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/davi/Documents/healthix/mediators/claim\",\"filename\":\"/home/davi/Documents/healthix/mediators/claim/src/util.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/davi/Documents/healthix/mediators/claim\",\"plugins\":[],\"presets\":[]}:7.12.9": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/davi/Documents/healthix/mediators/claim",
      "filename": "/home/davi/Documents/healthix/mediators/claim/src/util.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/davi/Documents/healthix/mediators/claim",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/davi/Documents/healthix/mediators/claim/src/util.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/davi/Documents/healthix/mediators/claim/src/util.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
        "sourceFileName": "util.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nexports.parseStringToBoolean = (value, defaultValue) => {\n  if (!value) return defaultValue;\n\n  switch (value.toLowerCase()) {\n    case 'true':\n      return true;\n\n    case 'false':\n      return false;\n\n    default:\n      return defaultValue;\n  }\n};\n\nexports.extractValueFromObject = (obj, path, defaultValue) => {\n  /**\n   * If the path is a string, convert it to an array\n   * @param  {String|Array} path The path\n   * @return {Array}             The path array\n   */\n  const stringToPath = function (path) {\n    // If the path isn't a string, return it\n    if (typeof path !== 'string') return path;\n    let output = []; // Split to an array with dot notation\n\n    path.split('.').forEach(function (item) {\n      // Split to an array with bracket notation\n      item.split(/\\[([^}]+)\\]/g).forEach(function (key) {\n        // Push to the new array\n        if (key.length > 0) {\n          output.push(key);\n        }\n      });\n    });\n    return output;\n  };\n\n  if (!obj) {\n    return null;\n  }\n\n  path = stringToPath(path); // Cache the current object\n\n  let current = obj; // For each item in the path, dig into the object\n\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (current[path[i]] == null) return defaultValue; // Otherwise, update the current value\n\n    current = current[path[i]];\n  }\n\n  return current;\n};\n\nexports.handleServerError = (ctx, operationFailureMsg, error, logger) => {\n  ctx.status = ctx.statusCode ? ctx.statusCode : 500;\n  const err = `${operationFailureMsg}${error.message}`;\n  ctx.body = {\n    error: err\n  };\n  logger.error(err);\n};\n\nexports.extractRegexFromPattern = pattern => {\n  if (pattern[0] === '/') {\n    pattern = pattern.substring(1);\n  }\n\n  const splitPattern = pattern.split('/');\n  let regexString = '';\n  const urlParamRegexPart = new RegExp(/[^ ;:=#@,/]{1,}/);\n  splitPattern.forEach(item => {\n    if (item && item[0] === ':') {\n      regexString += `\\\\/(?<${item.substring(1)}>${urlParamRegexPart.source})`;\n    } else {\n      regexString += `\\\\/${item}`;\n    }\n  });\n  regexString += '$';\n  return regexString;\n};\n\nexports.makeQuerablePromise = promise => {\n  // Don't create a wrapper for promises that can already be queried.\n  if (promise.isResolved) {\n    return promise;\n  }\n\n  let isResolved = false;\n  let isRejected = false; // Observe the promise, saving the fulfillment in a closure scope.\n\n  const result = promise.then(val => {\n    isResolved = true;\n    return val;\n  }, err => {\n    isRejected = true;\n    throw err;\n  });\n\n  result.isSettled = () => {\n    return isResolved || isRejected;\n  };\n\n  result.isResolved = () => {\n    return isResolved;\n  };\n\n  result.isRejected = () => {\n    return isRejected;\n  };\n\n  return result;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "util.js"
      ],
      "names": [
        "exports",
        "parseStringToBoolean",
        "value",
        "defaultValue",
        "toLowerCase",
        "extractValueFromObject",
        "obj",
        "path",
        "stringToPath",
        "output",
        "split",
        "forEach",
        "item",
        "key",
        "length",
        "push",
        "current",
        "i",
        "handleServerError",
        "ctx",
        "operationFailureMsg",
        "error",
        "logger",
        "status",
        "statusCode",
        "err",
        "message",
        "body",
        "extractRegexFromPattern",
        "pattern",
        "substring",
        "splitPattern",
        "regexString",
        "urlParamRegexPart",
        "RegExp",
        "source",
        "makeQuerablePromise",
        "promise",
        "isResolved",
        "isRejected",
        "result",
        "then",
        "val",
        "isSettled"
      ],
      "mappings": "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",
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "sourcesContent": [
        "'use strict'\n\nexports.parseStringToBoolean = (value, defaultValue) => {\n  if (!value) return defaultValue\n\n  switch (value.toLowerCase()) {\n    case 'true':\n      return true\n    case 'false':\n      return false\n    default:\n      return defaultValue\n  }\n}\n\nexports.extractValueFromObject = (obj, path, defaultValue) => {\n  /**\n   * If the path is a string, convert it to an array\n   * @param  {String|Array} path The path\n   * @return {Array}             The path array\n   */\n  const stringToPath = function (path) {\n    // If the path isn't a string, return it\n    if (typeof path !== 'string') return path\n\n    let output = []\n\n    // Split to an array with dot notation\n    path.split('.').forEach(function (item) {\n      // Split to an array with bracket notation\n      item.split(/\\[([^}]+)\\]/g).forEach(function (key) {\n        // Push to the new array\n        if (key.length > 0) {\n          output.push(key)\n        }\n      })\n    })\n\n    return output\n  }\n\n  if (!obj) {\n    return null\n  }\n\n  path = stringToPath(path)\n\n  // Cache the current object\n  let current = obj\n\n  // For each item in the path, dig into the object\n  for (let i = 0; i < path.length; i++) {\n    // If the item isn't found, return the default (or null)\n    if (current[path[i]] == null) return defaultValue\n\n    // Otherwise, update the current value\n    current = current[path[i]]\n  }\n\n  return current\n}\n\nexports.handleServerError = (ctx, operationFailureMsg, error, logger) => {\n  ctx.status = ctx.statusCode ? ctx.statusCode : 500\n  const err = `${operationFailureMsg}${error.message}`\n  ctx.body = {error: err}\n  logger.error(err)\n}\n\nexports.extractRegexFromPattern = pattern => {\n  if (pattern[0] === '/') {\n    pattern = pattern.substring(1)\n  }\n\n  const splitPattern = pattern.split('/')\n  let regexString = ''\n  const urlParamRegexPart = new RegExp(/[^ ;:=#@,/]{1,}/)\n\n  splitPattern.forEach(item => {\n    if (item && item[0] === ':') {\n      regexString += `\\\\/(?<${item.substring(1)}>${urlParamRegexPart.source})`\n    } else {\n      regexString += `\\\\/${item}`\n    }\n  })\n  regexString += '$'\n\n  return regexString\n}\n\nexports.makeQuerablePromise = promise => {\n  // Don't create a wrapper for promises that can already be queried.\n  if (promise.isResolved) {\n    return promise\n  }\n\n  let isResolved = false\n  let isRejected = false\n\n  // Observe the promise, saving the fulfillment in a closure scope.\n  const result = promise.then(\n    val => {\n      isResolved = true\n      return val\n    },\n    err => {\n      isRejected = true\n      throw err\n    }\n  )\n\n  result.isSettled = () => {\n    return isResolved || isRejected\n  }\n  result.isResolved = () => {\n    return isResolved\n  }\n  result.isRejected = () => {\n    return isRejected\n  }\n\n  return result\n}\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1607534818461
  },
  "{\"sourceRoot\":\"/home/davi/Documents/healthix/mediators/claim/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/davi/Documents/healthix/mediators/claim\",\"filename\":\"/home/davi/Documents/healthix/mediators/claim/src/logger.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/davi/Documents/healthix/mediators/claim\",\"plugins\":[],\"presets\":[]}:7.12.9": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/davi/Documents/healthix/mediators/claim",
      "filename": "/home/davi/Documents/healthix/mediators/claim/src/logger.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/davi/Documents/healthix/mediators/claim",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/davi/Documents/healthix/mediators/claim/src/logger.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/davi/Documents/healthix/mediators/claim/src/logger.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
        "sourceFileName": "logger.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst pino = require('pino');\n\nconst config = require('./config').getConfig();\n\nconst logger = pino({\n  level: config.logLevel,\n  prettyPrint: {\n    colorize: true,\n    translateTime: 'sys:UTC:yyyy-mm-dd\"T\"HH:MM:ss:l\"Z\"',\n    ignore: 'pid,hostname'\n  },\n  serializers: {\n    err: pino.stdSerializers.err\n  },\n  enabled: config.enableLogging\n});\nmodule.exports = logger;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2dlci5qcyJdLCJuYW1lcyI6WyJwaW5vIiwicmVxdWlyZSIsImNvbmZpZyIsImdldENvbmZpZyIsImxvZ2dlciIsImxldmVsIiwibG9nTGV2ZWwiLCJwcmV0dHlQcmludCIsImNvbG9yaXplIiwidHJhbnNsYXRlVGltZSIsImlnbm9yZSIsInNlcmlhbGl6ZXJzIiwiZXJyIiwic3RkU2VyaWFsaXplcnMiLCJlbmFibGVkIiwiZW5hYmxlTG9nZ2luZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFQLENBQW9CRSxTQUFwQixFQUFmOztBQUVBLE1BQU1DLE1BQU0sR0FBR0osSUFBSSxDQUFDO0FBQ2xCSyxFQUFBQSxLQUFLLEVBQUVILE1BQU0sQ0FBQ0ksUUFESTtBQUVsQkMsRUFBQUEsV0FBVyxFQUFFO0FBQ1hDLElBQUFBLFFBQVEsRUFBRSxJQURDO0FBRVhDLElBQUFBLGFBQWEsRUFBRSxvQ0FGSjtBQUdYQyxJQUFBQSxNQUFNLEVBQUU7QUFIRyxHQUZLO0FBT2xCQyxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsR0FBRyxFQUFFWixJQUFJLENBQUNhLGNBQUwsQ0FBb0JEO0FBRGQsR0FQSztBQVVsQkUsRUFBQUEsT0FBTyxFQUFFWixNQUFNLENBQUNhO0FBVkUsQ0FBRCxDQUFuQjtBQWFBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJiLE1BQWpCIiwic291cmNlUm9vdCI6Ii9ob21lL2RhdmkvRG9jdW1lbnRzL2hlYWx0aGl4L21lZGlhdG9ycy9jbGFpbS9zcmMvIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHBpbm8gPSByZXF1aXJlKCdwaW5vJylcblxuY29uc3QgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKS5nZXRDb25maWcoKVxuXG5jb25zdCBsb2dnZXIgPSBwaW5vKHtcbiAgbGV2ZWw6IGNvbmZpZy5sb2dMZXZlbCxcbiAgcHJldHR5UHJpbnQ6IHtcbiAgICBjb2xvcml6ZTogdHJ1ZSxcbiAgICB0cmFuc2xhdGVUaW1lOiAnc3lzOlVUQzp5eXl5LW1tLWRkXCJUXCJISDpNTTpzczpsXCJaXCInLFxuICAgIGlnbm9yZTogJ3BpZCxob3N0bmFtZSdcbiAgfSxcbiAgc2VyaWFsaXplcnM6IHtcbiAgICBlcnI6IHBpbm8uc3RkU2VyaWFsaXplcnMuZXJyXG4gIH0sXG4gIGVuYWJsZWQ6IGNvbmZpZy5lbmFibGVMb2dnaW5nXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZ2dlciJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "logger.js"
      ],
      "names": [
        "pino",
        "require",
        "config",
        "getConfig",
        "logger",
        "level",
        "logLevel",
        "prettyPrint",
        "colorize",
        "translateTime",
        "ignore",
        "serializers",
        "err",
        "stdSerializers",
        "enabled",
        "enableLogging",
        "module",
        "exports"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBE,SAApB,EAAf;;AAEA,MAAMC,MAAM,GAAGJ,IAAI,CAAC;AAClBK,EAAAA,KAAK,EAAEH,MAAM,CAACI,QADI;AAElBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE,IADC;AAEXC,IAAAA,aAAa,EAAE,oCAFJ;AAGXC,IAAAA,MAAM,EAAE;AAHG,GAFK;AAOlBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,GAAG,EAAEZ,IAAI,CAACa,cAAL,CAAoBD;AADd,GAPK;AAUlBE,EAAAA,OAAO,EAAEZ,MAAM,CAACa;AAVE,CAAD,CAAnB;AAaAC,MAAM,CAACC,OAAP,GAAiBb,MAAjB",
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "sourcesContent": [
        "'use strict'\n\nconst pino = require('pino')\n\nconst config = require('./config').getConfig()\n\nconst logger = pino({\n  level: config.logLevel,\n  prettyPrint: {\n    colorize: true,\n    translateTime: 'sys:UTC:yyyy-mm-dd\"T\"HH:MM:ss:l\"Z\"',\n    ignore: 'pid,hostname'\n  },\n  serializers: {\n    err: pino.stdSerializers.err\n  },\n  enabled: config.enableLogging\n})\n\nmodule.exports = logger"
      ]
    },
    "sourceType": "module",
    "mtime": 1607533022308
  },
  "{\"sourceRoot\":\"/home/davi/Documents/healthix/mediators/claim/src/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/davi/Documents/healthix/mediators/claim\",\"filename\":\"/home/davi/Documents/healthix/mediators/claim/src/openhim.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/davi/Documents/healthix/mediators/claim\",\"plugins\":[],\"presets\":[]}:7.12.9": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/davi/Documents/healthix/mediators/claim",
      "filename": "/home/davi/Documents/healthix/mediators/claim/src/openhim.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/davi/Documents/healthix/mediators/claim",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/davi/Documents/healthix/mediators/claim/src/openhim.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/davi/Documents/healthix/mediators/claim/src/openhim.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
        "sourceFileName": "openhim.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst logger = require('./logger');\n\nconst config = require('./config');\n\nconst mediatorUtils = require('openhim-mediator-utils');\n\nlet mediatorConfigJson, readError;\n\ntry {\n  const mediatorConfigFile = fs.readFileSync(path.resolve(__dirname, '.', 'mediatorConfig.json'));\n  mediatorConfigJson = JSON.parse(mediatorConfigFile);\n} catch (err) {\n  readError = err.message;\n  logger.error(`Mediator config file could not be retrieved: ${err.message}`);\n}\n\nconst configOptions = config.getConfig();\nconst openhimConfig = Object.assign({\n  urn: mediatorConfigJson.urn\n}, configOptions.openhim);\nmediatorConfigJson = Object.assign({}, mediatorConfigJson, {\n  urn: configOptions.openhim.urn\n});\n\nconst mediatorSetup = () => {\n  mediatorUtils.registerMediator(openhimConfig, mediatorConfigJson, error => {\n    if (error) {\n      logger.error(`Failed to register mediator. Caused by: ${error.message}`);\n      throw error;\n    }\n\n    logger.info('Successfully registered mediator!');\n    const emitter = mediatorUtils.activateHeartbeat(openhimConfig);\n    emitter.on('error', openhimError => {\n      logger.error('Heartbeat failed: ', openhimError);\n    });\n  });\n};\n\nexports.mediatorSetup = mediatorSetup;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9wZW5oaW0uanMiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwicGF0aCIsImxvZ2dlciIsImNvbmZpZyIsIm1lZGlhdG9yVXRpbHMiLCJtZWRpYXRvckNvbmZpZ0pzb24iLCJyZWFkRXJyb3IiLCJtZWRpYXRvckNvbmZpZ0ZpbGUiLCJyZWFkRmlsZVN5bmMiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiSlNPTiIsInBhcnNlIiwiZXJyIiwibWVzc2FnZSIsImVycm9yIiwiY29uZmlnT3B0aW9ucyIsImdldENvbmZpZyIsIm9wZW5oaW1Db25maWciLCJPYmplY3QiLCJhc3NpZ24iLCJ1cm4iLCJvcGVuaGltIiwibWVkaWF0b3JTZXR1cCIsInJlZ2lzdGVyTWVkaWF0b3IiLCJpbmZvIiwiZW1pdHRlciIsImFjdGl2YXRlSGVhcnRiZWF0Iiwib24iLCJvcGVuaGltRXJyb3IiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNRyxNQUFNLEdBQUdILE9BQU8sQ0FBQyxVQUFELENBQXRCOztBQUVBLE1BQU1JLGFBQWEsR0FBR0osT0FBTyxDQUFDLHdCQUFELENBQTdCOztBQUVBLElBQUlLLGtCQUFKLEVBQXdCQyxTQUF4Qjs7QUFFQSxJQUFJO0FBQ0YsUUFBTUMsa0JBQWtCLEdBQUdSLEVBQUUsQ0FBQ1MsWUFBSCxDQUN6QlAsSUFBSSxDQUFDUSxPQUFMLENBQWFDLFNBQWIsRUFBd0IsR0FBeEIsRUFBNkIscUJBQTdCLENBRHlCLENBQTNCO0FBR0FMLEVBQUFBLGtCQUFrQixHQUFHTSxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsa0JBQVgsQ0FBckI7QUFDRCxDQUxELENBS0UsT0FBT00sR0FBUCxFQUFZO0FBQ1pQLEVBQUFBLFNBQVMsR0FBR08sR0FBRyxDQUFDQyxPQUFoQjtBQUNBWixFQUFBQSxNQUFNLENBQUNhLEtBQVAsQ0FBYyxnREFBK0NGLEdBQUcsQ0FBQ0MsT0FBUSxFQUF6RTtBQUNEOztBQUVELE1BQU1FLGFBQWEsR0FBR2IsTUFBTSxDQUFDYyxTQUFQLEVBQXRCO0FBQ0EsTUFBTUMsYUFBYSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FDcEI7QUFBQ0MsRUFBQUEsR0FBRyxFQUFFaEIsa0JBQWtCLENBQUNnQjtBQUF6QixDQURvQixFQUVwQkwsYUFBYSxDQUFDTSxPQUZNLENBQXRCO0FBSUFqQixrQkFBa0IsR0FBR2MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQmYsa0JBQWxCLEVBQXNDO0FBQ3pEZ0IsRUFBQUEsR0FBRyxFQUFFTCxhQUFhLENBQUNNLE9BQWQsQ0FBc0JEO0FBRDhCLENBQXRDLENBQXJCOztBQUdBLE1BQU1FLGFBQWEsR0FBRyxNQUFNO0FBQzFCbkIsRUFBQUEsYUFBYSxDQUFDb0IsZ0JBQWQsQ0FBK0JOLGFBQS9CLEVBQThDYixrQkFBOUMsRUFBa0VVLEtBQUssSUFBSTtBQUN6RSxRQUFJQSxLQUFKLEVBQVc7QUFDVGIsTUFBQUEsTUFBTSxDQUFDYSxLQUFQLENBQWMsMkNBQTBDQSxLQUFLLENBQUNELE9BQVEsRUFBdEU7QUFDQSxZQUFNQyxLQUFOO0FBQ0Q7O0FBRURiLElBQUFBLE1BQU0sQ0FBQ3VCLElBQVAsQ0FBWSxtQ0FBWjtBQUVBLFVBQU1DLE9BQU8sR0FBR3RCLGFBQWEsQ0FBQ3VCLGlCQUFkLENBQWdDVCxhQUFoQyxDQUFoQjtBQUVBUSxJQUFBQSxPQUFPLENBQUNFLEVBQVIsQ0FBVyxPQUFYLEVBQW9CQyxZQUFZLElBQUk7QUFDbEMzQixNQUFBQSxNQUFNLENBQUNhLEtBQVAsQ0FBYSxvQkFBYixFQUFtQ2MsWUFBbkM7QUFDRCxLQUZEO0FBR0QsR0FiRDtBQWNELENBZkQ7O0FBa0JBQyxPQUFPLENBQUNQLGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlUm9vdCI6Ii9ob21lL2RhdmkvRG9jdW1lbnRzL2hlYWx0aGl4L21lZGlhdG9ycy9jbGFpbS9zcmMvIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuXG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlcicpXG5jb25zdCBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpXG5cbmNvbnN0IG1lZGlhdG9yVXRpbHMgPSByZXF1aXJlKCdvcGVuaGltLW1lZGlhdG9yLXV0aWxzJylcblxubGV0IG1lZGlhdG9yQ29uZmlnSnNvbiwgcmVhZEVycm9yXG5cbnRyeSB7XG4gIGNvbnN0IG1lZGlhdG9yQ29uZmlnRmlsZSA9IGZzLnJlYWRGaWxlU3luYyhcbiAgICBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLicsICdtZWRpYXRvckNvbmZpZy5qc29uJylcbiAgKVxuICBtZWRpYXRvckNvbmZpZ0pzb24gPSBKU09OLnBhcnNlKG1lZGlhdG9yQ29uZmlnRmlsZSlcbn0gY2F0Y2ggKGVycikge1xuICByZWFkRXJyb3IgPSBlcnIubWVzc2FnZVxuICBsb2dnZXIuZXJyb3IoYE1lZGlhdG9yIGNvbmZpZyBmaWxlIGNvdWxkIG5vdCBiZSByZXRyaWV2ZWQ6ICR7ZXJyLm1lc3NhZ2V9YClcbn1cblxuY29uc3QgY29uZmlnT3B0aW9ucyA9IGNvbmZpZy5nZXRDb25maWcoKVxuY29uc3Qgb3BlbmhpbUNvbmZpZyA9IE9iamVjdC5hc3NpZ24oXG4gIHt1cm46IG1lZGlhdG9yQ29uZmlnSnNvbi51cm59LFxuICBjb25maWdPcHRpb25zLm9wZW5oaW1cbilcbm1lZGlhdG9yQ29uZmlnSnNvbiA9IE9iamVjdC5hc3NpZ24oe30sIG1lZGlhdG9yQ29uZmlnSnNvbiwge1xuICB1cm46IGNvbmZpZ09wdGlvbnMub3BlbmhpbS51cm5cbn0pXG5jb25zdCBtZWRpYXRvclNldHVwID0gKCkgPT4ge1xuICBtZWRpYXRvclV0aWxzLnJlZ2lzdGVyTWVkaWF0b3Iob3BlbmhpbUNvbmZpZywgbWVkaWF0b3JDb25maWdKc29uLCBlcnJvciA9PiB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoYEZhaWxlZCB0byByZWdpc3RlciBtZWRpYXRvci4gQ2F1c2VkIGJ5OiAke2Vycm9yLm1lc3NhZ2V9YClcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuXG4gICAgbG9nZ2VyLmluZm8oJ1N1Y2Nlc3NmdWxseSByZWdpc3RlcmVkIG1lZGlhdG9yIScpXG5cbiAgICBjb25zdCBlbWl0dGVyID0gbWVkaWF0b3JVdGlscy5hY3RpdmF0ZUhlYXJ0YmVhdChvcGVuaGltQ29uZmlnKVxuXG4gICAgZW1pdHRlci5vbignZXJyb3InLCBvcGVuaGltRXJyb3IgPT4ge1xuICAgICAgbG9nZ2VyLmVycm9yKCdIZWFydGJlYXQgZmFpbGVkOiAnLCBvcGVuaGltRXJyb3IpXG4gICAgfSlcbiAgfSlcbn1cblxuXG5leHBvcnRzLm1lZGlhdG9yU2V0dXAgPSBtZWRpYXRvclNldHVwXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "openhim.js"
      ],
      "names": [
        "fs",
        "require",
        "path",
        "logger",
        "config",
        "mediatorUtils",
        "mediatorConfigJson",
        "readError",
        "mediatorConfigFile",
        "readFileSync",
        "resolve",
        "__dirname",
        "JSON",
        "parse",
        "err",
        "message",
        "error",
        "configOptions",
        "getConfig",
        "openhimConfig",
        "Object",
        "assign",
        "urn",
        "openhim",
        "mediatorSetup",
        "registerMediator",
        "info",
        "emitter",
        "activateHeartbeat",
        "on",
        "openhimError",
        "exports"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,wBAAD,CAA7B;;AAEA,IAAIK,kBAAJ,EAAwBC,SAAxB;;AAEA,IAAI;AACF,QAAMC,kBAAkB,GAAGR,EAAE,CAACS,YAAH,CACzBP,IAAI,CAACQ,OAAL,CAAaC,SAAb,EAAwB,GAAxB,EAA6B,qBAA7B,CADyB,CAA3B;AAGAL,EAAAA,kBAAkB,GAAGM,IAAI,CAACC,KAAL,CAAWL,kBAAX,CAArB;AACD,CALD,CAKE,OAAOM,GAAP,EAAY;AACZP,EAAAA,SAAS,GAAGO,GAAG,CAACC,OAAhB;AACAZ,EAAAA,MAAM,CAACa,KAAP,CAAc,gDAA+CF,GAAG,CAACC,OAAQ,EAAzE;AACD;;AAED,MAAME,aAAa,GAAGb,MAAM,CAACc,SAAP,EAAtB;AACA,MAAMC,aAAa,GAAGC,MAAM,CAACC,MAAP,CACpB;AAACC,EAAAA,GAAG,EAAEhB,kBAAkB,CAACgB;AAAzB,CADoB,EAEpBL,aAAa,CAACM,OAFM,CAAtB;AAIAjB,kBAAkB,GAAGc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,kBAAlB,EAAsC;AACzDgB,EAAAA,GAAG,EAAEL,aAAa,CAACM,OAAd,CAAsBD;AAD8B,CAAtC,CAArB;;AAGA,MAAME,aAAa,GAAG,MAAM;AAC1BnB,EAAAA,aAAa,CAACoB,gBAAd,CAA+BN,aAA/B,EAA8Cb,kBAA9C,EAAkEU,KAAK,IAAI;AACzE,QAAIA,KAAJ,EAAW;AACTb,MAAAA,MAAM,CAACa,KAAP,CAAc,2CAA0CA,KAAK,CAACD,OAAQ,EAAtE;AACA,YAAMC,KAAN;AACD;;AAEDb,IAAAA,MAAM,CAACuB,IAAP,CAAY,mCAAZ;AAEA,UAAMC,OAAO,GAAGtB,aAAa,CAACuB,iBAAd,CAAgCT,aAAhC,CAAhB;AAEAQ,IAAAA,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,YAAY,IAAI;AAClC3B,MAAAA,MAAM,CAACa,KAAP,CAAa,oBAAb,EAAmCc,YAAnC;AACD,KAFD;AAGD,GAbD;AAcD,CAfD;;AAkBAC,OAAO,CAACP,aAAR,GAAwBA,aAAxB",
      "sourceRoot": "/home/davi/Documents/healthix/mediators/claim/src/",
      "sourcesContent": [
        "'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nconst logger = require('./logger')\nconst config = require('./config')\n\nconst mediatorUtils = require('openhim-mediator-utils')\n\nlet mediatorConfigJson, readError\n\ntry {\n  const mediatorConfigFile = fs.readFileSync(\n    path.resolve(__dirname, '.', 'mediatorConfig.json')\n  )\n  mediatorConfigJson = JSON.parse(mediatorConfigFile)\n} catch (err) {\n  readError = err.message\n  logger.error(`Mediator config file could not be retrieved: ${err.message}`)\n}\n\nconst configOptions = config.getConfig()\nconst openhimConfig = Object.assign(\n  {urn: mediatorConfigJson.urn},\n  configOptions.openhim\n)\nmediatorConfigJson = Object.assign({}, mediatorConfigJson, {\n  urn: configOptions.openhim.urn\n})\nconst mediatorSetup = () => {\n  mediatorUtils.registerMediator(openhimConfig, mediatorConfigJson, error => {\n    if (error) {\n      logger.error(`Failed to register mediator. Caused by: ${error.message}`)\n      throw error\n    }\n\n    logger.info('Successfully registered mediator!')\n\n    const emitter = mediatorUtils.activateHeartbeat(openhimConfig)\n\n    emitter.on('error', openhimError => {\n      logger.error('Heartbeat failed: ', openhimError)\n    })\n  })\n}\n\n\nexports.mediatorSetup = mediatorSetup\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1607534251059
  }
}